%!PS-Adobe-2.0
%%Title: im10.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Oct 25 11:42:32 2012
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetia,50) findfont 140 scalefont setfont
1.000 UL
LTb
798 420 M
63 0 V
6101 0 R
-63 0 V
stroke
714 420 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 0.01)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 755 M
31 0 V
6133 0 R
-31 0 V
798 951 M
31 0 V
6133 0 R
-31 0 V
798 1090 M
31 0 V
6133 0 R
-31 0 V
798 1198 M
31 0 V
6133 0 R
-31 0 V
798 1286 M
31 0 V
6133 0 R
-31 0 V
798 1361 M
31 0 V
6133 0 R
-31 0 V
798 1425 M
31 0 V
6133 0 R
-31 0 V
798 1482 M
31 0 V
6133 0 R
-31 0 V
798 1533 M
63 0 V
6101 0 R
-63 0 V
stroke
714 1533 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 0.1)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 1868 M
31 0 V
6133 0 R
-31 0 V
798 2064 M
31 0 V
6133 0 R
-31 0 V
798 2203 M
31 0 V
6133 0 R
-31 0 V
798 2311 M
31 0 V
6133 0 R
-31 0 V
798 2399 M
31 0 V
6133 0 R
-31 0 V
798 2474 M
31 0 V
6133 0 R
-31 0 V
798 2538 M
31 0 V
6133 0 R
-31 0 V
798 2595 M
31 0 V
6133 0 R
-31 0 V
798 2646 M
63 0 V
6101 0 R
-63 0 V
stroke
714 2646 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 1)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 2981 M
31 0 V
6133 0 R
-31 0 V
798 3177 M
31 0 V
6133 0 R
-31 0 V
798 3316 M
31 0 V
6133 0 R
-31 0 V
798 3424 M
31 0 V
6133 0 R
-31 0 V
798 3512 M
31 0 V
6133 0 R
-31 0 V
798 3587 M
31 0 V
6133 0 R
-31 0 V
798 3651 M
31 0 V
6133 0 R
-31 0 V
798 3708 M
31 0 V
6133 0 R
-31 0 V
798 3759 M
63 0 V
6101 0 R
-63 0 V
stroke
714 3759 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 10)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 4094 M
31 0 V
6133 0 R
-31 0 V
798 4290 M
31 0 V
6133 0 R
-31 0 V
798 4429 M
31 0 V
6133 0 R
-31 0 V
798 4537 M
31 0 V
6133 0 R
-31 0 V
798 4625 M
31 0 V
6133 0 R
-31 0 V
798 4700 M
31 0 V
6133 0 R
-31 0 V
798 4764 M
31 0 V
6133 0 R
-31 0 V
798 4821 M
31 0 V
6133 0 R
-31 0 V
798 4872 M
63 0 V
6101 0 R
-63 0 V
stroke
714 4872 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 100)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 420 M
0 63 V
0 4389 R
0 -63 V
stroke
798 280 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 0.001)]
] -46.7 MCshow
grestore
1.000 UL
LTb
1417 420 M
0 31 V
0 4421 R
0 -31 V
1778 420 M
0 31 V
0 4421 R
0 -31 V
2035 420 M
0 31 V
0 4421 R
0 -31 V
2234 420 M
0 31 V
0 4421 R
0 -31 V
2397 420 M
0 31 V
0 4421 R
0 -31 V
2534 420 M
0 31 V
0 4421 R
0 -31 V
2654 420 M
0 31 V
0 4421 R
0 -31 V
2759 420 M
0 31 V
0 4421 R
0 -31 V
2853 420 M
0 63 V
0 4389 R
0 -63 V
stroke
2853 280 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 0.01)]
] -46.7 MCshow
grestore
1.000 UL
LTb
3471 420 M
0 31 V
0 4421 R
0 -31 V
3833 420 M
0 31 V
0 4421 R
0 -31 V
4090 420 M
0 31 V
0 4421 R
0 -31 V
4289 420 M
0 31 V
0 4421 R
0 -31 V
4452 420 M
0 31 V
0 4421 R
0 -31 V
4589 420 M
0 31 V
0 4421 R
0 -31 V
4708 420 M
0 31 V
0 4421 R
0 -31 V
4813 420 M
0 31 V
0 4421 R
0 -31 V
4907 420 M
0 63 V
0 4389 R
0 -63 V
stroke
4907 280 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 0.1)]
] -46.7 MCshow
grestore
1.000 UL
LTb
5526 420 M
0 31 V
0 4421 R
0 -31 V
5888 420 M
0 31 V
0 4421 R
0 -31 V
6144 420 M
0 31 V
0 4421 R
0 -31 V
6343 420 M
0 31 V
0 4421 R
0 -31 V
6506 420 M
0 31 V
0 4421 R
0 -31 V
6644 420 M
0 31 V
0 4421 R
0 -31 V
6763 420 M
0 31 V
0 4421 R
0 -31 V
6868 420 M
0 31 V
0 4421 R
0 -31 V
6962 420 M
0 63 V
0 4389 R
0 -63 V
stroke
6962 280 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 ( 1)]
] -46.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
798 420 M
6164 0 V
0 4452 V
-6164 0 V
798 420 L
LTb
140 2646 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetia,50) 140.0 0.0 true true 0 (F)]
] -46.7 MCshow
grestore
grestore
LTb
3880 70 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 (K [m)]
[(Helvetia,50) 112.0 70.0 true true 0 (-2)]
[(Helvetia,50) 140.0 0.0 true true 0 (])]
] -60.7 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
6311 4739 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 (F Lmin)]
] -46.7 MRshow
grestore
LT0
6395 4739 M
399 0 V
798 1768 M
619 18 V
361 19 V
257 17 V
199 18 V
163 16 V
137 17 V
120 16 V
105 16 V
94 15 V
618 141 V
362 121 V
257 107 V
199 96 V
163 87 V
137 79 V
119 73 V
105 68 V
94 64 V
619 474 V
362 316 V
256 238 V
199 191 V
163 159 V
138 137 V
119 119 V
105 107 V
94 96 V
798 1768 Pls
1417 1786 Pls
1778 1805 Pls
2035 1822 Pls
2234 1840 Pls
2397 1856 Pls
2534 1873 Pls
2654 1889 Pls
2759 1905 Pls
2853 1920 Pls
3471 2061 Pls
3833 2182 Pls
4090 2289 Pls
4289 2385 Pls
4452 2472 Pls
4589 2551 Pls
4708 2624 Pls
4813 2692 Pls
4907 2756 Pls
5526 3230 Pls
5888 3546 Pls
6144 3784 Pls
6343 3975 Pls
6506 4134 Pls
6644 4271 Pls
6763 4390 Pls
6868 4497 Pls
6962 4593 Pls
6594 4739 Pls
1.000 UP
1.000 UL
LT1
LTb
6311 4599 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 (F thin lens)]
] -46.7 MRshow
grestore
LT1
6395 4599 M
399 0 V
798 1455 M
618 39 V
361 37 V
257 35 V
199 33 V
163 31 V
138 31 V
119 29 V
105 28 V
94 28 V
85 26 V
77 26 V
72 25 V
66 24 V
62 24 V
57 23 V
54 23 V
51 21 V
49 22 V
45 21 V
44 20 V
41 20 V
40 20 V
38 19 V
36 19 V
35 18 V
34 18 V
33 18 V
31 17 V
30 17 V
29 17 V
29 16 V
27 17 V
27 16 V
26 15 V
25 16 V
24 15 V
24 15 V
23 14 V
23 15 V
22 14 V
21 14 V
21 14 V
21 14 V
20 13 V
20 13 V
19 13 V
18 13 V
19 13 V
18 13 V
18 12 V
17 12 V
17 12 V
17 12 V
16 12 V
16 12 V
16 11 V
15 12 V
16 11 V
15 11 V
14 11 V
15 11 V
14 11 V
14 10 V
14 11 V
14 10 V
13 10 V
13 11 V
13 10 V
13 10 V
13 9 V
12 10 V
13 10 V
12 9 V
12 10 V
12 9 V
11 10 V
12 9 V
11 9 V
11 9 V
11 9 V
11 9 V
11 9 V
11 8 V
10 9 V
11 8 V
10 9 V
10 8 V
10 9 V
10 8 V
10 8 V
10 8 V
10 8 V
9 8 V
10 8 V
9 8 V
9 8 V
9 8 V
9 7 V
9 8 V
9 8 V
9 7 V
9 7 V
stroke
4933 2960 M
8 8 V
9 7 V
8 7 V
9 8 V
8 7 V
8 7 V
8 7 V
9 7 V
8 7 V
7 7 V
8 7 V
8 7 V
8 6 V
8 7 V
7 7 V
8 6 V
7 7 V
8 7 V
7 6 V
7 6 V
7 7 V
8 6 V
7 7 V
7 6 V
7 6 V
7 6 V
7 6 V
6 7 V
7 6 V
7 6 V
7 6 V
6 6 V
7 6 V
6 6 V
7 5 V
6 6 V
7 6 V
6 6 V
6 6 V
7 5 V
6 6 V
6 6 V
6 5 V
6 6 V
6 5 V
6 6 V
6 5 V
6 6 V
6 5 V
6 5 V
6 6 V
6 5 V
5 5 V
6 6 V
6 5 V
5 5 V
6 5 V
5 5 V
6 6 V
5 5 V
6 5 V
5 5 V
6 5 V
5 5 V
5 5 V
6 5 V
5 5 V
5 4 V
5 5 V
6 5 V
5 5 V
5 5 V
5 5 V
5 4 V
5 5 V
5 5 V
5 4 V
5 5 V
5 5 V
5 4 V
5 5 V
4 4 V
5 5 V
5 5 V
5 4 V
1416 1494 Crs
1777 1531 Crs
2034 1566 Crs
2233 1599 Crs
2396 1630 Crs
2534 1661 Crs
2653 1690 Crs
2758 1718 Crs
2852 1746 Crs
2937 1772 Crs
3014 1798 Crs
3086 1823 Crs
3152 1847 Crs
3214 1871 Crs
3271 1894 Crs
3325 1917 Crs
3376 1938 Crs
3425 1960 Crs
3470 1981 Crs
3514 2001 Crs
3555 2021 Crs
3595 2041 Crs
3633 2060 Crs
3669 2079 Crs
3704 2097 Crs
3738 2115 Crs
3771 2133 Crs
3802 2150 Crs
3832 2167 Crs
3861 2184 Crs
3890 2200 Crs
3917 2217 Crs
3944 2233 Crs
3970 2248 Crs
3995 2264 Crs
4019 2279 Crs
4043 2294 Crs
4066 2308 Crs
4089 2323 Crs
4111 2337 Crs
4132 2351 Crs
4153 2365 Crs
4174 2379 Crs
4194 2392 Crs
4214 2405 Crs
4233 2418 Crs
4251 2431 Crs
4270 2444 Crs
4288 2457 Crs
4306 2469 Crs
4323 2481 Crs
4340 2493 Crs
4357 2505 Crs
4373 2517 Crs
4389 2529 Crs
4405 2540 Crs
4420 2552 Crs
4436 2563 Crs
4451 2574 Crs
4465 2585 Crs
4480 2596 Crs
4494 2607 Crs
4508 2617 Crs
4522 2628 Crs
4536 2638 Crs
4549 2648 Crs
4562 2659 Crs
4575 2669 Crs
4588 2679 Crs
4601 2688 Crs
4613 2698 Crs
4626 2708 Crs
4638 2717 Crs
4650 2727 Crs
4662 2736 Crs
4673 2746 Crs
4685 2755 Crs
4696 2764 Crs
4707 2773 Crs
4718 2782 Crs
4729 2791 Crs
4740 2800 Crs
4751 2808 Crs
4761 2817 Crs
4772 2825 Crs
4782 2834 Crs
4792 2842 Crs
4802 2851 Crs
4812 2859 Crs
4822 2867 Crs
4832 2875 Crs
4842 2883 Crs
4851 2891 Crs
4861 2899 Crs
4870 2907 Crs
4879 2915 Crs
4888 2923 Crs
4897 2930 Crs
4906 2938 Crs
4915 2946 Crs
4924 2953 Crs
4933 2960 Crs
4941 2968 Crs
4950 2975 Crs
4958 2982 Crs
4967 2990 Crs
4975 2997 Crs
4983 3004 Crs
4991 3011 Crs
5000 3018 Crs
5008 3025 Crs
5015 3032 Crs
5023 3039 Crs
5031 3046 Crs
5039 3052 Crs
5047 3059 Crs
5054 3066 Crs
5062 3072 Crs
5069 3079 Crs
5077 3086 Crs
5084 3092 Crs
5091 3098 Crs
5098 3105 Crs
5106 3111 Crs
5113 3118 Crs
5120 3124 Crs
5127 3130 Crs
5134 3136 Crs
5141 3142 Crs
5147 3149 Crs
5154 3155 Crs
5161 3161 Crs
5168 3167 Crs
5174 3173 Crs
5181 3179 Crs
5187 3185 Crs
5194 3190 Crs
5200 3196 Crs
5207 3202 Crs
5213 3208 Crs
5219 3214 Crs
5226 3219 Crs
5232 3225 Crs
5238 3231 Crs
5244 3236 Crs
5250 3242 Crs
5256 3247 Crs
5262 3253 Crs
5268 3258 Crs
5274 3264 Crs
5280 3269 Crs
5286 3274 Crs
5292 3280 Crs
5298 3285 Crs
5303 3290 Crs
5309 3296 Crs
5315 3301 Crs
5320 3306 Crs
5326 3311 Crs
5331 3316 Crs
5337 3322 Crs
5342 3327 Crs
5348 3332 Crs
5353 3337 Crs
5359 3342 Crs
5364 3347 Crs
5369 3352 Crs
5375 3357 Crs
5380 3362 Crs
5385 3366 Crs
5390 3371 Crs
5396 3376 Crs
5401 3381 Crs
5406 3386 Crs
5411 3391 Crs
5416 3395 Crs
5421 3400 Crs
5426 3405 Crs
5431 3409 Crs
5436 3414 Crs
5441 3419 Crs
5446 3423 Crs
5451 3428 Crs
5455 3432 Crs
5460 3437 Crs
5465 3442 Crs
5470 3446 Crs
6594 4599 Crs
1.000 UP
1.000 UL
LT2
LTb
6311 4459 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 (QD0 \(CLIC 3TeV l*=3.5m\))]
] -46.7 MRshow
grestore
LT2
5041 3326 Star
6594 4459 Star
1.000 UP
1.000 UL
LT3
LTb
6311 4319 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 (QD0 \(ILC 500GeV l*=3.5m\))]
] -46.7 MRshow
grestore
LT3
5380 3738 Box
6594 4319 Box
1.000 UP
1.000 UL
LT4
LTb
6311 4179 M
gsave 0 setgray
[ [(Helvetia,50) 140.0 0.0 true true 0 (QD0 \(CLIC 500GeV l*=4.3m\))]
] -46.7 MRshow
grestore
LT4
4682 3329 BoxF
6594 4179 BoxF
1.000 UL
LTb
798 420 M
6164 0 V
0 4452 V
-6164 0 V
798 420 L
1.000 UP
stroke
grestore
end
showpage
